
STM32_PWM_4CHANNELS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003438  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003600  08003600  00004600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003618  08003618  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003618  08003618  00004618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003620  08003620  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003620  08003620  00004620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003624  08003624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003628  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003634  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003634  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb1d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1e  00000000  00000000  00011b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00013678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000963  00000000  00000000  00014268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f5a  00000000  00000000  00014bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e072  00000000  00000000  00035b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccfbb  00000000  00000000  00043b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110b52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003378  00000000  00000000  00110b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00113f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080035e8 	.word	0x080035e8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080035e8 	.word	0x080035e8

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295
 8000824:	f04f 30ff 	movne.w	r0, #4294967295
 8000828:	f000 b96a 	b.w	8000b00 <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9d08      	ldr	r5, [sp, #32]
 800084a:	460c      	mov	r4, r1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d14e      	bne.n	80008ee <__udivmoddi4+0xaa>
 8000850:	4694      	mov	ip, r2
 8000852:	458c      	cmp	ip, r1
 8000854:	4686      	mov	lr, r0
 8000856:	fab2 f282 	clz	r2, r2
 800085a:	d962      	bls.n	8000922 <__udivmoddi4+0xde>
 800085c:	b14a      	cbz	r2, 8000872 <__udivmoddi4+0x2e>
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	4091      	lsls	r1, r2
 8000864:	fa20 f303 	lsr.w	r3, r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	4319      	orrs	r1, r3
 800086e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f f68c 	uxth.w	r6, ip
 800087a:	fbb1 f4f7 	udiv	r4, r1, r7
 800087e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000882:	fb07 1114 	mls	r1, r7, r4, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb04 f106 	mul.w	r1, r4, r6
 800088e:	4299      	cmp	r1, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x64>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f104 30ff 	add.w	r0, r4, #4294967295
 800089a:	f080 8112 	bcs.w	8000ac2 <__udivmoddi4+0x27e>
 800089e:	4299      	cmp	r1, r3
 80008a0:	f240 810f 	bls.w	8000ac2 <__udivmoddi4+0x27e>
 80008a4:	3c02      	subs	r4, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1a59      	subs	r1, r3, r1
 80008aa:	fa1f f38e 	uxth.w	r3, lr
 80008ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b2:	fb07 1110 	mls	r1, r7, r0, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f606 	mul.w	r6, r0, r6
 80008be:	429e      	cmp	r6, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x94>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ca:	f080 80fc 	bcs.w	8000ac6 <__udivmoddi4+0x282>
 80008ce:	429e      	cmp	r6, r3
 80008d0:	f240 80f9 	bls.w	8000ac6 <__udivmoddi4+0x282>
 80008d4:	4463      	add	r3, ip
 80008d6:	3802      	subs	r0, #2
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008de:	2100      	movs	r1, #0
 80008e0:	b11d      	cbz	r5, 80008ea <__udivmoddi4+0xa6>
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d905      	bls.n	80008fe <__udivmoddi4+0xba>
 80008f2:	b10d      	cbz	r5, 80008f8 <__udivmoddi4+0xb4>
 80008f4:	e9c5 0100 	strd	r0, r1, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	4608      	mov	r0, r1
 80008fc:	e7f5      	b.n	80008ea <__udivmoddi4+0xa6>
 80008fe:	fab3 f183 	clz	r1, r3
 8000902:	2900      	cmp	r1, #0
 8000904:	d146      	bne.n	8000994 <__udivmoddi4+0x150>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d302      	bcc.n	8000910 <__udivmoddi4+0xcc>
 800090a:	4290      	cmp	r0, r2
 800090c:	f0c0 80f0 	bcc.w	8000af0 <__udivmoddi4+0x2ac>
 8000910:	1a86      	subs	r6, r0, r2
 8000912:	eb64 0303 	sbc.w	r3, r4, r3
 8000916:	2001      	movs	r0, #1
 8000918:	2d00      	cmp	r5, #0
 800091a:	d0e6      	beq.n	80008ea <__udivmoddi4+0xa6>
 800091c:	e9c5 6300 	strd	r6, r3, [r5]
 8000920:	e7e3      	b.n	80008ea <__udivmoddi4+0xa6>
 8000922:	2a00      	cmp	r2, #0
 8000924:	f040 8090 	bne.w	8000a48 <__udivmoddi4+0x204>
 8000928:	eba1 040c 	sub.w	r4, r1, ip
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	fa1f f78c 	uxth.w	r7, ip
 8000934:	2101      	movs	r1, #1
 8000936:	fbb4 f6f8 	udiv	r6, r4, r8
 800093a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093e:	fb08 4416 	mls	r4, r8, r6, r4
 8000942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000946:	fb07 f006 	mul.w	r0, r7, r6
 800094a:	4298      	cmp	r0, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x11c>
 800094e:	eb1c 0303 	adds.w	r3, ip, r3
 8000952:	f106 34ff 	add.w	r4, r6, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x11a>
 8000958:	4298      	cmp	r0, r3
 800095a:	f200 80cd 	bhi.w	8000af8 <__udivmoddi4+0x2b4>
 800095e:	4626      	mov	r6, r4
 8000960:	1a1c      	subs	r4, r3, r0
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb4 f0f8 	udiv	r0, r4, r8
 800096a:	fb08 4410 	mls	r4, r8, r0, r4
 800096e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000972:	fb00 f707 	mul.w	r7, r0, r7
 8000976:	429f      	cmp	r7, r3
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x148>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000982:	d202      	bcs.n	800098a <__udivmoddi4+0x146>
 8000984:	429f      	cmp	r7, r3
 8000986:	f200 80b0 	bhi.w	8000aea <__udivmoddi4+0x2a6>
 800098a:	4620      	mov	r0, r4
 800098c:	1bdb      	subs	r3, r3, r7
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	e7a5      	b.n	80008e0 <__udivmoddi4+0x9c>
 8000994:	f1c1 0620 	rsb	r6, r1, #32
 8000998:	408b      	lsls	r3, r1
 800099a:	fa22 f706 	lsr.w	r7, r2, r6
 800099e:	431f      	orrs	r7, r3
 80009a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a4:	fa04 f301 	lsl.w	r3, r4, r1
 80009a8:	ea43 030c 	orr.w	r3, r3, ip
 80009ac:	40f4      	lsrs	r4, r6
 80009ae:	fa00 f801 	lsl.w	r8, r0, r1
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b8:	fbb4 fef0 	udiv	lr, r4, r0
 80009bc:	fa1f fc87 	uxth.w	ip, r7
 80009c0:	fb00 441e 	mls	r4, r0, lr, r4
 80009c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c8:	fb0e f90c 	mul.w	r9, lr, ip
 80009cc:	45a1      	cmp	r9, r4
 80009ce:	fa02 f201 	lsl.w	r2, r2, r1
 80009d2:	d90a      	bls.n	80009ea <__udivmoddi4+0x1a6>
 80009d4:	193c      	adds	r4, r7, r4
 80009d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009da:	f080 8084 	bcs.w	8000ae6 <__udivmoddi4+0x2a2>
 80009de:	45a1      	cmp	r9, r4
 80009e0:	f240 8081 	bls.w	8000ae6 <__udivmoddi4+0x2a2>
 80009e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	eba4 0409 	sub.w	r4, r4, r9
 80009ee:	fa1f f983 	uxth.w	r9, r3
 80009f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f6:	fb00 4413 	mls	r4, r0, r3, r4
 80009fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a02:	45a4      	cmp	ip, r4
 8000a04:	d907      	bls.n	8000a16 <__udivmoddi4+0x1d2>
 8000a06:	193c      	adds	r4, r7, r4
 8000a08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a0c:	d267      	bcs.n	8000ade <__udivmoddi4+0x29a>
 8000a0e:	45a4      	cmp	ip, r4
 8000a10:	d965      	bls.n	8000ade <__udivmoddi4+0x29a>
 8000a12:	3b02      	subs	r3, #2
 8000a14:	443c      	add	r4, r7
 8000a16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1e:	eba4 040c 	sub.w	r4, r4, ip
 8000a22:	429c      	cmp	r4, r3
 8000a24:	46ce      	mov	lr, r9
 8000a26:	469c      	mov	ip, r3
 8000a28:	d351      	bcc.n	8000ace <__udivmoddi4+0x28a>
 8000a2a:	d04e      	beq.n	8000aca <__udivmoddi4+0x286>
 8000a2c:	b155      	cbz	r5, 8000a44 <__udivmoddi4+0x200>
 8000a2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a32:	eb64 040c 	sbc.w	r4, r4, ip
 8000a36:	fa04 f606 	lsl.w	r6, r4, r6
 8000a3a:	40cb      	lsrs	r3, r1
 8000a3c:	431e      	orrs	r6, r3
 8000a3e:	40cc      	lsrs	r4, r1
 8000a40:	e9c5 6400 	strd	r6, r4, [r5]
 8000a44:	2100      	movs	r1, #0
 8000a46:	e750      	b.n	80008ea <__udivmoddi4+0xa6>
 8000a48:	f1c2 0320 	rsb	r3, r2, #32
 8000a4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	fa24 f303 	lsr.w	r3, r4, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a64:	fa1f f78c 	uxth.w	r7, ip
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb00 f107 	mul.w	r1, r0, r7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x24c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a86:	d22c      	bcs.n	8000ae2 <__udivmoddi4+0x29e>
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d92a      	bls.n	8000ae2 <__udivmoddi4+0x29e>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a98:	fb08 3311 	mls	r3, r8, r1, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb01 f307 	mul.w	r3, r1, r7
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x276>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ab0:	d213      	bcs.n	8000ada <__udivmoddi4+0x296>
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	d911      	bls.n	8000ada <__udivmoddi4+0x296>
 8000ab6:	3902      	subs	r1, #2
 8000ab8:	4464      	add	r4, ip
 8000aba:	1ae4      	subs	r4, r4, r3
 8000abc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ac0:	e739      	b.n	8000936 <__udivmoddi4+0xf2>
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	e6f0      	b.n	80008a8 <__udivmoddi4+0x64>
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e706      	b.n	80008d8 <__udivmoddi4+0x94>
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d2ae      	bcs.n	8000a2c <__udivmoddi4+0x1e8>
 8000ace:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ad2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7a8      	b.n	8000a2c <__udivmoddi4+0x1e8>
 8000ada:	4631      	mov	r1, r6
 8000adc:	e7ed      	b.n	8000aba <__udivmoddi4+0x276>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e799      	b.n	8000a16 <__udivmoddi4+0x1d2>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e7d4      	b.n	8000a90 <__udivmoddi4+0x24c>
 8000ae6:	46d6      	mov	lr, sl
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1a6>
 8000aea:	4463      	add	r3, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	e74d      	b.n	800098c <__udivmoddi4+0x148>
 8000af0:	4606      	mov	r6, r0
 8000af2:	4623      	mov	r3, r4
 8000af4:	4608      	mov	r0, r1
 8000af6:	e70f      	b.n	8000918 <__udivmoddi4+0xd4>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	e730      	b.n	8000960 <__udivmoddi4+0x11c>
 8000afe:	bf00      	nop

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fb4a 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f838 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 f98c 	bl	8000e2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b14:	f000 f960 	bl	8000dd8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b18:	f000 f892 	bl	8000c40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Init(&htim2) != HAL_OK) Error_Handler();
 8000b1c:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <main+0x78>)
 8000b1e:	f001 fc65 	bl	80023ec <HAL_TIM_PWM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <main+0x28>
 8000b28:	f000 f9ee 	bl	8000f08 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <main+0x78>)
 8000b30:	f001 fcac 	bl	800248c <HAL_TIM_PWM_Start>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <main+0x3a>
  {
	  Error_Handler();
 8000b3a:	f000 f9e5 	bl	8000f08 <Error_Handler>
  }

  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <main+0x78>)
 8000b42:	f001 fca3 	bl	800248c <HAL_TIM_PWM_Start>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <main+0x4c>
  {
	  Error_Handler();
 8000b4c:	f000 f9dc 	bl	8000f08 <Error_Handler>
  }

  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK)
 8000b50:	2108      	movs	r1, #8
 8000b52:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <main+0x78>)
 8000b54:	f001 fc9a 	bl	800248c <HAL_TIM_PWM_Start>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <main+0x5e>
  {
	  Error_Handler();
 8000b5e:	f000 f9d3 	bl	8000f08 <Error_Handler>
  }

  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8000b62:	210c      	movs	r1, #12
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <main+0x78>)
 8000b66:	f001 fc91 	bl	800248c <HAL_TIM_PWM_Start>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <main+0x72>
  {
	  Error_Handler();
 8000b70:	f000 f9ca 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	e7fd      	b.n	8000b76 <main+0x72>
 8000b7a:	bf00      	nop
 8000b7c:	20000028 	.word	0x20000028

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	@ 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2234      	movs	r2, #52	@ 0x34
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 fcfe 	bl	8003590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <SystemClock_Config+0xb4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <SystemClock_Config+0xb4>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <SystemClock_Config+0xb4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <SystemClock_Config+0xb8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c38 <SystemClock_Config+0xb8>)
 8000bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <SystemClock_Config+0xb8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f95c 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bfe:	f000 f983 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fdfd 	bl	800181c <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c28:	f000 f96e 	bl	8000f08 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3750      	adds	r7, #80	@ 0x50
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000
 8000c3c:	00000000 	.word	0x00000000

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c62:	4b59      	ldr	r3, [pc, #356]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000c6a:	4b57      	ldr	r3, [pc, #348]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000c6c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000c70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b55      	ldr	r3, [pc, #340]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8000c78:	4b53      	ldr	r3, [pc, #332]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000c7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b51      	ldr	r3, [pc, #324]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b50      	ldr	r3, [pc, #320]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c8c:	484e      	ldr	r0, [pc, #312]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000c8e:	f001 fbad 	bl	80023ec <HAL_TIM_PWM_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c98:	f000 f936 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4847      	ldr	r0, [pc, #284]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000cac:	f002 f91c 	bl	8002ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cb6:	f000 f927 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	@ 0x60
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]

  sConfigOC.Pulse = htim2.Init.Period * 0.25;
 8000cc6:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd08 	bl	80006e0 <__aeabi_ui2d>
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8000dcc <MX_TIM2_Init+0x18c>)
 8000cd6:	f7ff fa97 	bl	8000208 <__aeabi_dmul>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4610      	mov	r0, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff fd77 	bl	80007d4 <__aeabi_d2uiz>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4835      	ldr	r0, [pc, #212]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000cf2:	f001 fd83 	bl	80027fc <HAL_TIM_PWM_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000cfc:	f000 f904 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  sConfigOC.Pulse = htim2.Init.Period * 0.45;
 8000d00:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fceb 	bl	80006e0 <__aeabi_ui2d>
 8000d0a:	a32d      	add	r3, pc, #180	@ (adr r3, 8000dc0 <MX_TIM2_Init+0x180>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fa7a 	bl	8000208 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fd5a 	bl	80007d4 <__aeabi_d2uiz>
 8000d20:	4603      	mov	r3, r0
 8000d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2204      	movs	r2, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4827      	ldr	r0, [pc, #156]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000d2c:	f001 fd66 	bl	80027fc <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000d36:	f000 f8e7 	bl	8000f08 <Error_Handler>
  }

  sConfigOC.Pulse = htim2.Init.Period * 0.5;
 8000d3a:	4b23      	ldr	r3, [pc, #140]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fcce 	bl	80006e0 <__aeabi_ui2d>
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_TIM2_Init+0x190>)
 8000d4a:	f7ff fa5d 	bl	8000208 <__aeabi_dmul>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	f7ff fd3d 	bl	80007d4 <__aeabi_d2uiz>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2208      	movs	r2, #8
 8000d62:	4619      	mov	r1, r3
 8000d64:	4818      	ldr	r0, [pc, #96]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000d66:	f001 fd49 	bl	80027fc <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x134>
  {
    Error_Handler();
 8000d70:	f000 f8ca 	bl	8000f08 <Error_Handler>
  }

  sConfigOC.Pulse = htim2.Init.Period * 0.75;
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fcb1 	bl	80006e0 <__aeabi_ui2d>
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_TIM2_Init+0x194>)
 8000d84:	f7ff fa40 	bl	8000208 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fd20 	bl	80007d4 <__aeabi_d2uiz>
 8000d94:	4603      	mov	r3, r0
 8000d96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000da0:	f001 fd2c 	bl	80027fc <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x16e>
  {
    Error_Handler();
 8000daa:	f000 f8ad 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dae:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <MX_TIM2_Init+0x188>)
 8000db0:	f000 f8fe 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	cccccccd 	.word	0xcccccccd
 8000dc4:	3fdccccc 	.word	0x3fdccccc
 8000dc8:	20000028 	.word	0x20000028
 8000dcc:	3fd00000 	.word	0x3fd00000
 8000dd0:	3fe00000 	.word	0x3fe00000
 8000dd4:	3fe80000 	.word	0x3fe80000

08000dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <MX_USART2_UART_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e10:	f002 f8fa 	bl	8003008 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1a:	f000 f875 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000070 	.word	0x20000070
 8000e28:	40004400 	.word	0x40004400

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a25      	ldr	r2, [pc, #148]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a1e      	ldr	r2, [pc, #120]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a17      	ldr	r2, [pc, #92]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <MX_GPIO_Init+0xd0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_GPIO_Init+0xd4>)
 8000eb8:	f000 fc96 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <MX_GPIO_Init+0xd8>)
 8000ed4:	f000 faf4 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_GPIO_Init+0xd4>)
 8000ef0:	f000 fae6 	bl	80014c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	@ 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020800 	.word	0x40020800

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <Error_Handler+0x8>

08000f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f52:	2007      	movs	r0, #7
 8000f54:	f000 fa66 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f74:	d115      	bne.n	8000fa2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_TIM_PWM_MspInit+0x48>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <HAL_TIM_PWM_MspInit+0x48>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_TIM_PWM_MspInit+0x48>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201c      	movs	r0, #28
 8000f98:	f000 fa4f 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f000 fa68 	bl	8001472 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fd0:	d11d      	bne.n	800100e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <HAL_TIM_MspPostInit+0x68>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a0f      	ldr	r2, [pc, #60]	@ (8001018 <HAL_TIM_MspPostInit+0x68>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <HAL_TIM_MspPostInit+0x68>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <HAL_TIM_MspPostInit+0x6c>)
 800100a:	f000 fa59 	bl	80014c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <HAL_UART_MspInit+0x84>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12b      	bne.n	800109a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <HAL_UART_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <HAL_UART_MspInit+0x88>)
 800104c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001050:	6413      	str	r3, [r2, #64]	@ 0x40
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_UART_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <HAL_UART_MspInit+0x88>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800107a:	230c      	movs	r3, #12
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108a:	2307      	movs	r3, #7
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <HAL_UART_MspInit+0x8c>)
 8001096:	f000 fa13 	bl	80014c0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004400 	.word	0x40004400
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001106:	f000 f89d 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800110a:	f000 f9cc 	bl	80014a6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <TIM2_IRQHandler+0x10>)
 800111a:	f001 fa7f 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000028 	.word	0x20000028

08001128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001184 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001150:	f7ff ffea 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	@ (800118c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	@ (8001198 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800117a:	f002 fa11 	bl	80035a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff fcc1 	bl	8000b04 <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001190:	08003628 	.word	0x08003628
  ldr r2, =_sbss
 8001194:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001198:	200000bc 	.word	0x200000bc

0800119c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <HAL_Init+0x40>)
 80011aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <HAL_Init+0x40>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_Init+0x40>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f92b 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fe9e 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f943 	bl	800148e <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f90b 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	200000b8 	.word	0x200000b8

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200000b8 	.word	0x200000b8

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	@ (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff29 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff3e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff31 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80014aa:	f000 f802 	bl	80014b2 <HAL_SYSTICK_Callback>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e165      	b.n	80017a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 8154 	bne.w	80017a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d005      	beq.n	8001512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	2b02      	cmp	r3, #2
 8001510:	d130      	bne.n	8001574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b03      	cmp	r3, #3
 800157e:	d017      	beq.n	80015b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d123      	bne.n	8001604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	69b9      	ldr	r1, [r7, #24]
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80ae 	beq.w	80017a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b5d      	ldr	r3, [pc, #372]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a5c      	ldr	r2, [pc, #368]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b5a      	ldr	r3, [pc, #360]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001662:	4a58      	ldr	r2, [pc, #352]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4f      	ldr	r2, [pc, #316]	@ (80017c8 <HAL_GPIO_Init+0x308>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d025      	beq.n	80016da <HAL_GPIO_Init+0x21a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4e      	ldr	r2, [pc, #312]	@ (80017cc <HAL_GPIO_Init+0x30c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01f      	beq.n	80016d6 <HAL_GPIO_Init+0x216>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x212>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4c      	ldr	r2, [pc, #304]	@ (80017d4 <HAL_GPIO_Init+0x314>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x20e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4b      	ldr	r2, [pc, #300]	@ (80017d8 <HAL_GPIO_Init+0x318>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x20a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4a      	ldr	r2, [pc, #296]	@ (80017dc <HAL_GPIO_Init+0x31c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a49      	ldr	r2, [pc, #292]	@ (80017e0 <HAL_GPIO_Init+0x320>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x202>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016da:	2300      	movs	r3, #0
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ec:	4935      	ldr	r1, [pc, #212]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fa:	4b3a      	ldr	r3, [pc, #232]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171e:	4a31      	ldr	r2, [pc, #196]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001724:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001748:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174e:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001772:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800179c:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <HAL_GPIO_Init+0x324>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f67f ae96 	bls.w	80014dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40021400 	.word	0x40021400
 80017e0:	40021800 	.word	0x40021800
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001804:	e003      	b.n	800180e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cc      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b68      	ldr	r3, [pc, #416]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d90c      	bls.n	8001858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b65      	ldr	r3, [pc, #404]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a58      	ldr	r2, [pc, #352]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800187a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d044      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d003      	beq.n	80018da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b3f      	ldr	r3, [pc, #252]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e067      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4934      	ldr	r1, [pc, #208]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff fcae 	bl	800126c <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff fcaa 	bl	800126c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e04f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d20c      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f855 	bl	8001a50 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fc0e 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08003600 	.word	0x08003600
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	@ (8001a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08003610 	.word	0x08003610

08001a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a2c:	f7ff ffdc 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0b5b      	lsrs	r3, r3, #13
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4903      	ldr	r1, [pc, #12]	@ (8001a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08003610 	.word	0x08003610

08001a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a54:	b0ae      	sub	sp, #184	@ 0xb8
 8001a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a76:	4bcb      	ldr	r3, [pc, #812]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	f200 8206 	bhi.w	8001e90 <HAL_RCC_GetSysClockFreq+0x440>
 8001a84:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001ac1 	.word	0x08001ac1
 8001a90:	08001e91 	.word	0x08001e91
 8001a94:	08001e91 	.word	0x08001e91
 8001a98:	08001e91 	.word	0x08001e91
 8001a9c:	08001ac9 	.word	0x08001ac9
 8001aa0:	08001e91 	.word	0x08001e91
 8001aa4:	08001e91 	.word	0x08001e91
 8001aa8:	08001e91 	.word	0x08001e91
 8001aac:	08001ad1 	.word	0x08001ad1
 8001ab0:	08001e91 	.word	0x08001e91
 8001ab4:	08001e91 	.word	0x08001e91
 8001ab8:	08001e91 	.word	0x08001e91
 8001abc:	08001cc1 	.word	0x08001cc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4bb9      	ldr	r3, [pc, #740]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001ac6:	e1e7      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac8:	4bb8      	ldr	r3, [pc, #736]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x35c>)
 8001aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ace:	e1e3      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad0:	4bb4      	ldr	r3, [pc, #720]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001adc:	4bb1      	ldr	r3, [pc, #708]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d071      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae8:	4bae      	ldr	r3, [pc, #696]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001af4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b0e:	4622      	mov	r2, r4
 8001b10:	462b      	mov	r3, r5
 8001b12:	f04f 0000 	mov.w	r0, #0
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	0159      	lsls	r1, r3, #5
 8001b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b20:	0150      	lsls	r0, r2, #5
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4621      	mov	r1, r4
 8001b28:	1a51      	subs	r1, r2, r1
 8001b2a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001b40:	4649      	mov	r1, r9
 8001b42:	018b      	lsls	r3, r1, #6
 8001b44:	4641      	mov	r1, r8
 8001b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b4a:	4641      	mov	r1, r8
 8001b4c:	018a      	lsls	r2, r1, #6
 8001b4e:	4641      	mov	r1, r8
 8001b50:	1a51      	subs	r1, r2, r1
 8001b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b54:	4649      	mov	r1, r9
 8001b56:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b68:	4649      	mov	r1, r9
 8001b6a:	00cb      	lsls	r3, r1, #3
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b72:	4641      	mov	r1, r8
 8001b74:	00ca      	lsls	r2, r1, #3
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	189b      	adds	r3, r3, r2
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b82:	462b      	mov	r3, r5
 8001b84:	460a      	mov	r2, r1
 8001b86:	eb42 0303 	adc.w	r3, r2, r3
 8001b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b98:	4629      	mov	r1, r5
 8001b9a:	024b      	lsls	r3, r1, #9
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	024a      	lsls	r2, r1, #9
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001bb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bbc:	f7fe fe2a 	bl	8000814 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bca:	e067      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bcc:	4b75      	ldr	r3, [pc, #468]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bd8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001be6:	2300      	movs	r3, #0
 8001be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001bee:	4622      	mov	r2, r4
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	0159      	lsls	r1, r3, #5
 8001bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c00:	0150      	lsls	r0, r2, #5
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4621      	mov	r1, r4
 8001c08:	1a51      	subs	r1, r2, r1
 8001c0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001c20:	4649      	mov	r1, r9
 8001c22:	018b      	lsls	r3, r1, #6
 8001c24:	4641      	mov	r1, r8
 8001c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c2a:	4641      	mov	r1, r8
 8001c2c:	018a      	lsls	r2, r1, #6
 8001c2e:	4641      	mov	r1, r8
 8001c30:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c34:	4649      	mov	r1, r9
 8001c36:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c4e:	4692      	mov	sl, r2
 8001c50:	469b      	mov	fp, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	eb1a 0303 	adds.w	r3, sl, r3
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	028b      	lsls	r3, r1, #10
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c78:	4621      	mov	r1, r4
 8001c7a:	028a      	lsls	r2, r1, #10
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c84:	2200      	movs	r2, #0
 8001c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c88:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c8e:	f7fe fdc1 	bl	8000814 <__aeabi_uldivmod>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4613      	mov	r3, r2
 8001c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c9c:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	0c1b      	lsrs	r3, r3, #16
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cbe:	e0eb      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc0:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d06b      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cec:	2300      	movs	r3, #0
 8001cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cf0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	462b      	mov	r3, r5
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0159      	lsls	r1, r3, #5
 8001d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d06:	0150      	lsls	r0, r2, #5
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	1a51      	subs	r1, r2, r1
 8001d10:	61b9      	str	r1, [r7, #24]
 8001d12:	4629      	mov	r1, r5
 8001d14:	eb63 0301 	sbc.w	r3, r3, r1
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d26:	4659      	mov	r1, fp
 8001d28:	018b      	lsls	r3, r1, #6
 8001d2a:	4651      	mov	r1, sl
 8001d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d30:	4651      	mov	r1, sl
 8001d32:	018a      	lsls	r2, r1, #6
 8001d34:	4651      	mov	r1, sl
 8001d36:	ebb2 0801 	subs.w	r8, r2, r1
 8001d3a:	4659      	mov	r1, fp
 8001d3c:	eb63 0901 	sbc.w	r9, r3, r1
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d54:	4690      	mov	r8, r2
 8001d56:	4699      	mov	r9, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	eb18 0303 	adds.w	r3, r8, r3
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	462b      	mov	r3, r5
 8001d62:	eb49 0303 	adc.w	r3, r9, r3
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d74:	4629      	mov	r1, r5
 8001d76:	024b      	lsls	r3, r1, #9
 8001d78:	4621      	mov	r1, r4
 8001d7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d7e:	4621      	mov	r1, r4
 8001d80:	024a      	lsls	r2, r1, #9
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d94:	f7fe fd3e 	bl	8000814 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001da2:	e065      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x420>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	2200      	movs	r2, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	4611      	mov	r1, r2
 8001dbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001dca:	4642      	mov	r2, r8
 8001dcc:	464b      	mov	r3, r9
 8001dce:	f04f 0000 	mov.w	r0, #0
 8001dd2:	f04f 0100 	mov.w	r1, #0
 8001dd6:	0159      	lsls	r1, r3, #5
 8001dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ddc:	0150      	lsls	r0, r2, #5
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4641      	mov	r1, r8
 8001de4:	1a51      	subs	r1, r2, r1
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	4649      	mov	r1, r9
 8001dea:	eb63 0301 	sbc.w	r3, r3, r1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001dfc:	4659      	mov	r1, fp
 8001dfe:	018b      	lsls	r3, r1, #6
 8001e00:	4651      	mov	r1, sl
 8001e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e06:	4651      	mov	r1, sl
 8001e08:	018a      	lsls	r2, r1, #6
 8001e0a:	4651      	mov	r1, sl
 8001e0c:	1a54      	subs	r4, r2, r1
 8001e0e:	4659      	mov	r1, fp
 8001e10:	eb63 0501 	sbc.w	r5, r3, r1
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	00eb      	lsls	r3, r5, #3
 8001e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e22:	00e2      	lsls	r2, r4, #3
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	4643      	mov	r3, r8
 8001e2a:	18e3      	adds	r3, r4, r3
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	464b      	mov	r3, r9
 8001e30:	eb45 0303 	adc.w	r3, r5, r3
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e42:	4629      	mov	r1, r5
 8001e44:	028b      	lsls	r3, r1, #10
 8001e46:	4621      	mov	r1, r4
 8001e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	028a      	lsls	r2, r1, #10
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e58:	2200      	movs	r2, #0
 8001e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e62:	f7fe fcd7 	bl	8000814 <__aeabi_uldivmod>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	0f1b      	lsrs	r3, r3, #28
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e8e:	e003      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	37b8      	adds	r7, #184	@ 0xb8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400

08001eb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e28d      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8083 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ed0:	4b94      	ldr	r3, [pc, #592]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d019      	beq.n	8001f10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001edc:	4b91      	ldr	r3, [pc, #580]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ef4:	d00c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d112      	bne.n	8001f28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f02:	4b88      	ldr	r3, [pc, #544]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f0e:	d10b      	bne.n	8001f28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	4b84      	ldr	r3, [pc, #528]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d05b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x124>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d157      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e25a      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f30:	d106      	bne.n	8001f40 <HAL_RCC_OscConfig+0x90>
 8001f32:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xcc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0xb4>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b73      	ldr	r3, [pc, #460]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a72      	ldr	r2, [pc, #456]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xcc>
 8001f64:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b6c      	ldr	r3, [pc, #432]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6b      	ldr	r2, [pc, #428]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f972 	bl	800126c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f96e 	bl	800126c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e21f      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b61      	ldr	r3, [pc, #388]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xdc>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f95e 	bl	800126c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff f95a 	bl	800126c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	@ 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e20b      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b57      	ldr	r3, [pc, #348]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x104>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d06f      	beq.n	80020c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fe2:	4b50      	ldr	r3, [pc, #320]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d017      	beq.n	800201e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fee:	4b4d      	ldr	r3, [pc, #308]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002012:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x186>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1d3      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4937      	ldr	r1, [pc, #220]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e03a      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <HAL_RCC_OscConfig+0x278>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff f907 	bl	800126c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002062:	f7ff f903 	bl	800126c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1b4      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4925      	ldr	r1, [pc, #148]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <HAL_RCC_OscConfig+0x278>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f8e6 	bl	800126c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a4:	f7ff f8e2 	bl	800126c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e193      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d036      	beq.n	800213c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_RCC_OscConfig+0x27c>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f8c6 	bl	800126c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff f8c2 	bl	800126c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e173      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x234>
 8002102:	e01b      	b.n	800213c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_OscConfig+0x27c>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff f8af 	bl	800126c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	e00e      	b.n	8002130 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002112:	f7ff f8ab 	bl	800126c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d907      	bls.n	8002130 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e15c      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b8a      	ldr	r3, [pc, #552]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ea      	bne.n	8002112 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8097 	beq.w	8002278 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b83      	ldr	r3, [pc, #524]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a7e      	ldr	r2, [pc, #504]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b7c      	ldr	r3, [pc, #496]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b79      	ldr	r3, [pc, #484]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b76      	ldr	r3, [pc, #472]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7ff f86b 	bl	800126c <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff f867 	bl	800126c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e118      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x31e>
 80021c0:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c4:	4a65      	ldr	r2, [pc, #404]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x358>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x340>
 80021d6:	4b61      	ldr	r3, [pc, #388]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	4a60      	ldr	r2, [pc, #384]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e2:	4b5e      	ldr	r3, [pc, #376]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	4a5d      	ldr	r2, [pc, #372]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0x358>
 80021f0:	4b5a      	ldr	r3, [pc, #360]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	4a59      	ldr	r2, [pc, #356]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fc:	4b57      	ldr	r3, [pc, #348]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002200:	4a56      	ldr	r2, [pc, #344]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002202:	f023 0304 	bic.w	r3, r3, #4
 8002206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7ff f82c 	bl	800126c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7ff f828 	bl	800126c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0d7      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	4b4b      	ldr	r3, [pc, #300]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ee      	beq.n	8002218 <HAL_RCC_OscConfig+0x368>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff f816 	bl	800126c <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7ff f812 	bl	800126c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0c1      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	4b40      	ldr	r3, [pc, #256]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ee      	bne.n	8002244 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80ad 	beq.w	80023dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002282:	4b36      	ldr	r3, [pc, #216]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d060      	beq.n	8002350 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d145      	bne.n	8002322 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <HAL_RCC_OscConfig+0x4b4>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe ffe6 	bl	800126c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe ffe2 	bl	800126c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e093      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	071b      	lsls	r3, r3, #28
 80022ee:	491b      	ldr	r1, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_RCC_OscConfig+0x4b4>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe ffb7 	bl	800126c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe ffb3 	bl	800126c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e064      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x452>
 8002320:	e05c      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <HAL_RCC_OscConfig+0x4b4>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe ffa0 	bl	800126c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe ff9c 	bl	800126c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e04d      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x480>
 800234e:	e045      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e040      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
 8002364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002368:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <HAL_RCC_OscConfig+0x538>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d030      	beq.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d129      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d122      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800239e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d119      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	3b01      	subs	r3, #1
 80023b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d10f      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e041      	b.n	8002482 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fda6 	bl	8000f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f000 fada 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <HAL_TIM_PWM_Start+0x24>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e022      	b.n	80024f6 <HAL_TIM_PWM_Start+0x6a>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d109      	bne.n	80024ca <HAL_TIM_PWM_Start+0x3e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	e015      	b.n	80024f6 <HAL_TIM_PWM_Start+0x6a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d109      	bne.n	80024e4 <HAL_TIM_PWM_Start+0x58>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	bf14      	ite	ne
 80024dc:	2301      	movne	r3, #1
 80024de:	2300      	moveq	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	e008      	b.n	80024f6 <HAL_TIM_PWM_Start+0x6a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07c      	b.n	80025f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <HAL_TIM_PWM_Start+0x82>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	e013      	b.n	8002536 <HAL_TIM_PWM_Start+0xaa>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d104      	bne.n	800251e <HAL_TIM_PWM_Start+0x92>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800251c:	e00b      	b.n	8002536 <HAL_TIM_PWM_Start+0xaa>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d104      	bne.n	800252e <HAL_TIM_PWM_Start+0xa2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800252c:	e003      	b.n	8002536 <HAL_TIM_PWM_Start+0xaa>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fcac 	bl	8002e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2d      	ldr	r2, [pc, #180]	@ (8002600 <HAL_TIM_PWM_Start+0x174>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_TIM_PWM_Start+0xcc>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2c      	ldr	r2, [pc, #176]	@ (8002604 <HAL_TIM_PWM_Start+0x178>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_TIM_PWM_Start+0xd0>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_TIM_PWM_Start+0xd2>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a22      	ldr	r2, [pc, #136]	@ (8002600 <HAL_TIM_PWM_Start+0x174>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x136>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002584:	d01d      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x136>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	@ (8002608 <HAL_TIM_PWM_Start+0x17c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d018      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x136>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1d      	ldr	r2, [pc, #116]	@ (800260c <HAL_TIM_PWM_Start+0x180>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x136>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <HAL_TIM_PWM_Start+0x184>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00e      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x136>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a16      	ldr	r2, [pc, #88]	@ (8002604 <HAL_TIM_PWM_Start+0x178>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x136>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a18      	ldr	r2, [pc, #96]	@ (8002614 <HAL_TIM_PWM_Start+0x188>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d004      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x136>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a16      	ldr	r2, [pc, #88]	@ (8002618 <HAL_TIM_PWM_Start+0x18c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d010      	beq.n	80025f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40010000 	.word	0x40010000
 8002604:	40010400 	.word	0x40010400
 8002608:	40000400 	.word	0x40000400
 800260c:	40000800 	.word	0x40000800
 8002610:	40000c00 	.word	0x40000c00
 8002614:	40014000 	.word	0x40014000
 8002618:	40001800 	.word	0x40001800

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0202 	mvn.w	r2, #2
 8002650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f99e 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f990 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9a1 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f978 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f96a 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f97b 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d020      	beq.n	8002718 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01b      	beq.n	8002718 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0208 	mvn.w	r2, #8
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2204      	movs	r2, #4
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f952 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f944 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f955 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d020      	beq.n	8002764 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01b      	beq.n	8002764 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0210 	mvn.w	r2, #16
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2208      	movs	r2, #8
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f92c 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f91e 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f92f 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0201 	mvn.w	r2, #1
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8fc 	bl	8002980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fc24 	bl	8002ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f900 	bl	80029d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0220 	mvn.w	r2, #32
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fbf6 	bl	8002fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002816:	2302      	movs	r3, #2
 8002818:	e0ae      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	f200 809f 	bhi.w	8002968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800282a:	a201      	add	r2, pc, #4	@ (adr r2, 8002830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002865 	.word	0x08002865
 8002834:	08002969 	.word	0x08002969
 8002838:	08002969 	.word	0x08002969
 800283c:	08002969 	.word	0x08002969
 8002840:	080028a5 	.word	0x080028a5
 8002844:	08002969 	.word	0x08002969
 8002848:	08002969 	.word	0x08002969
 800284c:	08002969 	.word	0x08002969
 8002850:	080028e7 	.word	0x080028e7
 8002854:	08002969 	.word	0x08002969
 8002858:	08002969 	.word	0x08002969
 800285c:	08002969 	.word	0x08002969
 8002860:	08002927 	.word	0x08002927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f966 	bl	8002b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0208 	orr.w	r2, r2, #8
 800287e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0204 	bic.w	r2, r2, #4
 800288e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6999      	ldr	r1, [r3, #24]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	619a      	str	r2, [r3, #24]
      break;
 80028a2:	e064      	b.n	800296e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f9b6 	bl	8002c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6999      	ldr	r1, [r3, #24]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	021a      	lsls	r2, r3, #8
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	619a      	str	r2, [r3, #24]
      break;
 80028e4:	e043      	b.n	800296e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fa0b 	bl	8002d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0208 	orr.w	r2, r2, #8
 8002900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0204 	bic.w	r2, r2, #4
 8002910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69d9      	ldr	r1, [r3, #28]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	61da      	str	r2, [r3, #28]
      break;
 8002924:	e023      	b.n	800296e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fa5f 	bl	8002df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69d9      	ldr	r1, [r3, #28]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	61da      	str	r2, [r3, #28]
      break;
 8002966:	e002      	b.n	800296e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	75fb      	strb	r3, [r7, #23]
      break;
 800296c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a46      	ldr	r2, [pc, #280]	@ (8002b10 <TIM_Base_SetConfig+0x12c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a02:	d00f      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a43      	ldr	r2, [pc, #268]	@ (8002b14 <TIM_Base_SetConfig+0x130>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a42      	ldr	r2, [pc, #264]	@ (8002b18 <TIM_Base_SetConfig+0x134>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a41      	ldr	r2, [pc, #260]	@ (8002b1c <TIM_Base_SetConfig+0x138>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a40      	ldr	r2, [pc, #256]	@ (8002b20 <TIM_Base_SetConfig+0x13c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d108      	bne.n	8002a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a35      	ldr	r2, [pc, #212]	@ (8002b10 <TIM_Base_SetConfig+0x12c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a44:	d027      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a32      	ldr	r2, [pc, #200]	@ (8002b14 <TIM_Base_SetConfig+0x130>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d023      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a31      	ldr	r2, [pc, #196]	@ (8002b18 <TIM_Base_SetConfig+0x134>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <TIM_Base_SetConfig+0x138>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2f      	ldr	r2, [pc, #188]	@ (8002b20 <TIM_Base_SetConfig+0x13c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d017      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2e      	ldr	r2, [pc, #184]	@ (8002b24 <TIM_Base_SetConfig+0x140>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2d      	ldr	r2, [pc, #180]	@ (8002b28 <TIM_Base_SetConfig+0x144>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00f      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <TIM_Base_SetConfig+0x148>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2b      	ldr	r2, [pc, #172]	@ (8002b30 <TIM_Base_SetConfig+0x14c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2a      	ldr	r2, [pc, #168]	@ (8002b34 <TIM_Base_SetConfig+0x150>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a29      	ldr	r2, [pc, #164]	@ (8002b38 <TIM_Base_SetConfig+0x154>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a10      	ldr	r2, [pc, #64]	@ (8002b10 <TIM_Base_SetConfig+0x12c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0xf8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a12      	ldr	r2, [pc, #72]	@ (8002b20 <TIM_Base_SetConfig+0x13c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d103      	bne.n	8002ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f023 0201 	bic.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]
  }
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40000800 	.word	0x40000800
 8002b1c:	40000c00 	.word	0x40000c00
 8002b20:	40010400 	.word	0x40010400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	40001800 	.word	0x40001800
 8002b34:	40001c00 	.word	0x40001c00
 8002b38:	40002000 	.word	0x40002000

08002b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 0201 	bic.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f023 0302 	bic.w	r3, r3, #2
 8002b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a20      	ldr	r2, [pc, #128]	@ (8002c14 <TIM_OC1_SetConfig+0xd8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_OC1_SetConfig+0x64>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c18 <TIM_OC1_SetConfig+0xdc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10c      	bne.n	8002bba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0308 	bic.w	r3, r3, #8
 8002ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a15      	ldr	r2, [pc, #84]	@ (8002c14 <TIM_OC1_SetConfig+0xd8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d003      	beq.n	8002bca <TIM_OC1_SetConfig+0x8e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a14      	ldr	r2, [pc, #80]	@ (8002c18 <TIM_OC1_SetConfig+0xdc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d111      	bne.n	8002bee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40010400 	.word	0x40010400

08002c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f023 0210 	bic.w	r2, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0320 	bic.w	r3, r3, #32
 8002c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a22      	ldr	r2, [pc, #136]	@ (8002d00 <TIM_OC2_SetConfig+0xe4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_OC2_SetConfig+0x68>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <TIM_OC2_SetConfig+0xe8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10d      	bne.n	8002ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <TIM_OC2_SetConfig+0xe4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <TIM_OC2_SetConfig+0x94>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a16      	ldr	r2, [pc, #88]	@ (8002d04 <TIM_OC2_SetConfig+0xe8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d113      	bne.n	8002cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40010400 	.word	0x40010400

08002d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a21      	ldr	r2, [pc, #132]	@ (8002de8 <TIM_OC3_SetConfig+0xe0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_OC3_SetConfig+0x66>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a20      	ldr	r2, [pc, #128]	@ (8002dec <TIM_OC3_SetConfig+0xe4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10d      	bne.n	8002d8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <TIM_OC3_SetConfig+0xe0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_OC3_SetConfig+0x92>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a15      	ldr	r2, [pc, #84]	@ (8002dec <TIM_OC3_SetConfig+0xe4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d113      	bne.n	8002dc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	621a      	str	r2, [r3, #32]
}
 8002ddc:	bf00      	nop
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40010400 	.word	0x40010400

08002df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	031b      	lsls	r3, r3, #12
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <TIM_OC4_SetConfig+0xa4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_OC4_SetConfig+0x68>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a11      	ldr	r2, [pc, #68]	@ (8002e98 <TIM_OC4_SetConfig+0xa8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d109      	bne.n	8002e6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40010400 	.word	0x40010400

08002e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2201      	movs	r2, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e05a      	b.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a21      	ldr	r2, [pc, #132]	@ (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d022      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4c:	d01d      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d018      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00e      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a17      	ldr	r2, [pc, #92]	@ (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a15      	ldr	r2, [pc, #84]	@ (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10c      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40010400 	.word	0x40010400
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40001800 	.word	0x40001800

08002fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e042      	b.n	80030a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fff6 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800304a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f82b 	bl	80030a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	b0c0      	sub	sp, #256	@ 0x100
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	ea40 0301 	orr.w	r3, r0, r1
 80030d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	431a      	orrs	r2, r3
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003100:	f021 010c 	bic.w	r1, r1, #12
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800310e:	430b      	orrs	r3, r1
 8003110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	6999      	ldr	r1, [r3, #24]
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	ea40 0301 	orr.w	r3, r0, r1
 800312e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b8f      	ldr	r3, [pc, #572]	@ (8003374 <UART_SetConfig+0x2cc>)
 8003138:	429a      	cmp	r2, r3
 800313a:	d005      	beq.n	8003148 <UART_SetConfig+0xa0>
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b8d      	ldr	r3, [pc, #564]	@ (8003378 <UART_SetConfig+0x2d0>)
 8003144:	429a      	cmp	r2, r3
 8003146:	d104      	bne.n	8003152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7fe fc6e 	bl	8001a28 <HAL_RCC_GetPCLK2Freq>
 800314c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003150:	e003      	b.n	800315a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003152:	f7fe fc55 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8003156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003164:	f040 810c 	bne.w	8003380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	1891      	adds	r1, r2, r2
 8003180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003182:	415b      	adcs	r3, r3
 8003184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800318a:	4621      	mov	r1, r4
 800318c:	eb12 0801 	adds.w	r8, r2, r1
 8003190:	4629      	mov	r1, r5
 8003192:	eb43 0901 	adc.w	r9, r3, r1
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031aa:	4690      	mov	r8, r2
 80031ac:	4699      	mov	r9, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	eb18 0303 	adds.w	r3, r8, r3
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031b8:	462b      	mov	r3, r5
 80031ba:	eb49 0303 	adc.w	r3, r9, r3
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031d6:	460b      	mov	r3, r1
 80031d8:	18db      	adds	r3, r3, r3
 80031da:	653b      	str	r3, [r7, #80]	@ 0x50
 80031dc:	4613      	mov	r3, r2
 80031de:	eb42 0303 	adc.w	r3, r2, r3
 80031e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80031e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031ec:	f7fd fb12 	bl	8000814 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4b61      	ldr	r3, [pc, #388]	@ (800337c <UART_SetConfig+0x2d4>)
 80031f6:	fba3 2302 	umull	r2, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	011c      	lsls	r4, r3, #4
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800320c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	1891      	adds	r1, r2, r2
 8003216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003218:	415b      	adcs	r3, r3
 800321a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800321c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003220:	4641      	mov	r1, r8
 8003222:	eb12 0a01 	adds.w	sl, r2, r1
 8003226:	4649      	mov	r1, r9
 8003228:	eb43 0b01 	adc.w	fp, r3, r1
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800323c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003240:	4692      	mov	sl, r2
 8003242:	469b      	mov	fp, r3
 8003244:	4643      	mov	r3, r8
 8003246:	eb1a 0303 	adds.w	r3, sl, r3
 800324a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800324e:	464b      	mov	r3, r9
 8003250:	eb4b 0303 	adc.w	r3, fp, r3
 8003254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800326c:	460b      	mov	r3, r1
 800326e:	18db      	adds	r3, r3, r3
 8003270:	643b      	str	r3, [r7, #64]	@ 0x40
 8003272:	4613      	mov	r3, r2
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	647b      	str	r3, [r7, #68]	@ 0x44
 800327a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800327e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003282:	f7fd fac7 	bl	8000814 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4611      	mov	r1, r2
 800328c:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <UART_SetConfig+0x2d4>)
 800328e:	fba3 2301 	umull	r2, r3, r3, r1
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2264      	movs	r2, #100	@ 0x64
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	1acb      	subs	r3, r1, r3
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032a2:	4b36      	ldr	r3, [pc, #216]	@ (800337c <UART_SetConfig+0x2d4>)
 80032a4:	fba3 2302 	umull	r2, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032b0:	441c      	add	r4, r3
 80032b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032c4:	4642      	mov	r2, r8
 80032c6:	464b      	mov	r3, r9
 80032c8:	1891      	adds	r1, r2, r2
 80032ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032cc:	415b      	adcs	r3, r3
 80032ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032d4:	4641      	mov	r1, r8
 80032d6:	1851      	adds	r1, r2, r1
 80032d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80032da:	4649      	mov	r1, r9
 80032dc:	414b      	adcs	r3, r1
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032ec:	4659      	mov	r1, fp
 80032ee:	00cb      	lsls	r3, r1, #3
 80032f0:	4651      	mov	r1, sl
 80032f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f6:	4651      	mov	r1, sl
 80032f8:	00ca      	lsls	r2, r1, #3
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	4642      	mov	r2, r8
 8003302:	189b      	adds	r3, r3, r2
 8003304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003308:	464b      	mov	r3, r9
 800330a:	460a      	mov	r2, r1
 800330c:	eb42 0303 	adc.w	r3, r2, r3
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003328:	460b      	mov	r3, r1
 800332a:	18db      	adds	r3, r3, r3
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800332e:	4613      	mov	r3, r2
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800333a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800333e:	f7fd fa69 	bl	8000814 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <UART_SetConfig+0x2d4>)
 8003348:	fba3 1302 	umull	r1, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	2164      	movs	r1, #100	@ 0x64
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	3332      	adds	r3, #50	@ 0x32
 800335a:	4a08      	ldr	r2, [pc, #32]	@ (800337c <UART_SetConfig+0x2d4>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4422      	add	r2, r4
 800336e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003370:	e106      	b.n	8003580 <UART_SetConfig+0x4d8>
 8003372:	bf00      	nop
 8003374:	40011000 	.word	0x40011000
 8003378:	40011400 	.word	0x40011400
 800337c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800338a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800338e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003392:	4642      	mov	r2, r8
 8003394:	464b      	mov	r3, r9
 8003396:	1891      	adds	r1, r2, r2
 8003398:	6239      	str	r1, [r7, #32]
 800339a:	415b      	adcs	r3, r3
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
 800339e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033a2:	4641      	mov	r1, r8
 80033a4:	1854      	adds	r4, r2, r1
 80033a6:	4649      	mov	r1, r9
 80033a8:	eb43 0501 	adc.w	r5, r3, r1
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	00eb      	lsls	r3, r5, #3
 80033b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ba:	00e2      	lsls	r2, r4, #3
 80033bc:	4614      	mov	r4, r2
 80033be:	461d      	mov	r5, r3
 80033c0:	4643      	mov	r3, r8
 80033c2:	18e3      	adds	r3, r4, r3
 80033c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033c8:	464b      	mov	r3, r9
 80033ca:	eb45 0303 	adc.w	r3, r5, r3
 80033ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033ee:	4629      	mov	r1, r5
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	4621      	mov	r1, r4
 80033f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f8:	4621      	mov	r1, r4
 80033fa:	008a      	lsls	r2, r1, #2
 80033fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003400:	f7fd fa08 	bl	8000814 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4b60      	ldr	r3, [pc, #384]	@ (800358c <UART_SetConfig+0x4e4>)
 800340a:	fba3 2302 	umull	r2, r3, r3, r2
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	011c      	lsls	r4, r3, #4
 8003412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800341c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003424:	4642      	mov	r2, r8
 8003426:	464b      	mov	r3, r9
 8003428:	1891      	adds	r1, r2, r2
 800342a:	61b9      	str	r1, [r7, #24]
 800342c:	415b      	adcs	r3, r3
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	4641      	mov	r1, r8
 8003436:	1851      	adds	r1, r2, r1
 8003438:	6139      	str	r1, [r7, #16]
 800343a:	4649      	mov	r1, r9
 800343c:	414b      	adcs	r3, r1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800344c:	4659      	mov	r1, fp
 800344e:	00cb      	lsls	r3, r1, #3
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003456:	4651      	mov	r1, sl
 8003458:	00ca      	lsls	r2, r1, #3
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	4603      	mov	r3, r0
 8003460:	4642      	mov	r2, r8
 8003462:	189b      	adds	r3, r3, r2
 8003464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003468:	464b      	mov	r3, r9
 800346a:	460a      	mov	r2, r1
 800346c:	eb42 0303 	adc.w	r3, r2, r3
 8003470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800347e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800348c:	4649      	mov	r1, r9
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003496:	4641      	mov	r1, r8
 8003498:	008a      	lsls	r2, r1, #2
 800349a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800349e:	f7fd f9b9 	bl	8000814 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	4b38      	ldr	r3, [pc, #224]	@ (800358c <UART_SetConfig+0x4e4>)
 80034aa:	fba3 2301 	umull	r2, r3, r3, r1
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2264      	movs	r2, #100	@ 0x64
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	1acb      	subs	r3, r1, r3
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	3332      	adds	r3, #50	@ 0x32
 80034bc:	4a33      	ldr	r2, [pc, #204]	@ (800358c <UART_SetConfig+0x4e4>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034c8:	441c      	add	r4, r3
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80034d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80034d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	415b      	adcs	r3, r3
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034e8:	4641      	mov	r1, r8
 80034ea:	1851      	adds	r1, r2, r1
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	4649      	mov	r1, r9
 80034f0:	414b      	adcs	r3, r1
 80034f2:	607b      	str	r3, [r7, #4]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003500:	4659      	mov	r1, fp
 8003502:	00cb      	lsls	r3, r1, #3
 8003504:	4651      	mov	r1, sl
 8003506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350a:	4651      	mov	r1, sl
 800350c:	00ca      	lsls	r2, r1, #3
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	4603      	mov	r3, r0
 8003514:	4642      	mov	r2, r8
 8003516:	189b      	adds	r3, r3, r2
 8003518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800351a:	464b      	mov	r3, r9
 800351c:	460a      	mov	r2, r1
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	663b      	str	r3, [r7, #96]	@ 0x60
 800352e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800353c:	4649      	mov	r1, r9
 800353e:	008b      	lsls	r3, r1, #2
 8003540:	4641      	mov	r1, r8
 8003542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003546:	4641      	mov	r1, r8
 8003548:	008a      	lsls	r2, r1, #2
 800354a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800354e:	f7fd f961 	bl	8000814 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <UART_SetConfig+0x4e4>)
 8003558:	fba3 1302 	umull	r1, r3, r3, r2
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	2164      	movs	r1, #100	@ 0x64
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	3332      	adds	r3, #50	@ 0x32
 800356a:	4a08      	ldr	r2, [pc, #32]	@ (800358c <UART_SetConfig+0x4e4>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4422      	add	r2, r4
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003586:	46bd      	mov	sp, r7
 8003588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358c:	51eb851f 	.word	0x51eb851f

08003590 <memset>:
 8003590:	4402      	add	r2, r0
 8003592:	4603      	mov	r3, r0
 8003594:	4293      	cmp	r3, r2
 8003596:	d100      	bne.n	800359a <memset+0xa>
 8003598:	4770      	bx	lr
 800359a:	f803 1b01 	strb.w	r1, [r3], #1
 800359e:	e7f9      	b.n	8003594 <memset+0x4>

080035a0 <__libc_init_array>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4d0d      	ldr	r5, [pc, #52]	@ (80035d8 <__libc_init_array+0x38>)
 80035a4:	4c0d      	ldr	r4, [pc, #52]	@ (80035dc <__libc_init_array+0x3c>)
 80035a6:	1b64      	subs	r4, r4, r5
 80035a8:	10a4      	asrs	r4, r4, #2
 80035aa:	2600      	movs	r6, #0
 80035ac:	42a6      	cmp	r6, r4
 80035ae:	d109      	bne.n	80035c4 <__libc_init_array+0x24>
 80035b0:	4d0b      	ldr	r5, [pc, #44]	@ (80035e0 <__libc_init_array+0x40>)
 80035b2:	4c0c      	ldr	r4, [pc, #48]	@ (80035e4 <__libc_init_array+0x44>)
 80035b4:	f000 f818 	bl	80035e8 <_init>
 80035b8:	1b64      	subs	r4, r4, r5
 80035ba:	10a4      	asrs	r4, r4, #2
 80035bc:	2600      	movs	r6, #0
 80035be:	42a6      	cmp	r6, r4
 80035c0:	d105      	bne.n	80035ce <__libc_init_array+0x2e>
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
 80035c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c8:	4798      	blx	r3
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7ee      	b.n	80035ac <__libc_init_array+0xc>
 80035ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d2:	4798      	blx	r3
 80035d4:	3601      	adds	r6, #1
 80035d6:	e7f2      	b.n	80035be <__libc_init_array+0x1e>
 80035d8:	08003620 	.word	0x08003620
 80035dc:	08003620 	.word	0x08003620
 80035e0:	08003620 	.word	0x08003620
 80035e4:	08003624 	.word	0x08003624

080035e8 <_init>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr

080035f4 <_fini>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr
